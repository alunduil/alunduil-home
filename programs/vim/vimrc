" vim-plug {
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif

    call plug#begin('~/.vim/plugged')

    Plug 'neoclide/coc.nvim', { 'branch': 'release' }

    " JSONC
    Plug 'kevinoid/vim-jsonc'

    " Language Server Extensions
    Plug 'fannheyward/coc-markdownlint', { 'do': 'yarn install --frozen-lockfile' }
    Plug 'josa42/coc-sh', { 'do': 'yarn install --frozen-lockfile' }

    " DHall Plugins
    Plug 'vmchale/dhall-vim', { 'for': 'dhall' }

    " Erlang Plugins
    " TODO https://github.com/hyhugh/coc-erlang_ls
    Plug 'vim-erlang/vim-dialyzer', { 'for': 'erlang' }
    Plug 'vim-erlang/vim-erlang-compiler', { 'for': 'erlang' }
    Plug 'vim-erlang/vim-erlang-runtime', { 'for': 'erlang' }
    Plug 'vim-erlang/vim-rebar', { 'for': 'erlang' }

    " Haskell Plugins
    Plug 'Twinside/vim-hoogle', { 'for': 'haskell' }
    Plug 'alx741/vim-stylishask', { 'for': 'haskell' }
    Plug 'dag/vim2hs', { 'for': 'haskell' }
    Plug 'neovimhaskell/haskell-vim', { 'for': 'haskell' }

    " Idris Plugins
    Plug 'idris-hackers/idris-vim', { 'for': 'idris' }

    " Nix Plugins
    Plug 'LnL7/vim-nix', { 'for': 'nix' }

    " systemd Plugins
    Plug 'Matt-Deacalion/vim-systemd-syntax'

    " Thrift Plugins
    Plug 'solarnz/thrift.vim', { 'for': 'thrift' }

    call plug#end()
" }

" Basic Settings {
    set nocompatible

    " Allow backspacing over everything in insert mode
    set backspace=2

    " Set up cpoptions
    set cpoptions=aABceFsmq
    "             ||||||||+-- Leave the cursor between joined lines
    "             |||||||+-- Pause when new match is created
    "             ||||||+-- Set options upon entering a buffer
    "             |||||+-- :write updates the current file name
    "             ||||+-- Automatically add <CR> to registers
    "             |||+-- Search continues at the end of the current match
    "             ||+-- Backslashes have no special meaning for :map
    "             |+-- :write sets alternative file name
    "             +-- :read sets alternative file name

    " Always turn on modeline support
    set modeline
" }

" Behavior {
    " Load filetype indentation and plugins
    filetype plugin indent on

    " Some language servers have issues with backup files.
    set nobackup
    set nowritebackup

    " Alias the * register to the system's clipboard
    set clipboard=unnamed

    " Support all three formats (<CR>, <CR><LF>, and <LF><CR>) in that order
    set fileformats=unix,dos,mac

    " Be quiet
    set noerrorbells

    " Turn auto-indentation on, but be smart about it
    set autoindent
    set smartindent

    " Turn on per-project vimrc files, but disable unsafe commands in them
    " Look in $HOM#/.vimrc or $HOME/.vim/vimrc
    set exrc
    set secure

    " Decrease delays.
    set updatetime=100
" }

" UI {
    " Set colorscheme to desert
    colorscheme solarized8_light

    " Incremental search, highlight matches
    set hlsearch
    set incsearch

    " Show the Status Line (Airline)
    set laststatus=2

    " Give more space for status messages.
    set cmdheight=2

    " Always show the ruler
    set ruler

    " Avoid redrawing when possible
    set lazyredraw

    " Show matching brackets, blink them for 0.2 seconds
    set noshowmatch
    set matchtime=0

    " Don't jump to the first non-whitespace on a line
    set nostartofline

    " Report when anything is changed via :commands
    set report=0

    " Short status messages
    " câ€”Don't send messages to |ins-complete-menu|
    set shortmess=aOstTc

    " Always show the command being typed
    set showcmd

    " Scroll when 5 characters from the edge
    set scrolloff=3
    set sidescrolloff=5

    " Set auto-complete to offer the longest possible match
    set completeopt=longest,menuone

    " Always show sign column.
    set signcolumn=number
" }

" Text Formatting/Layout {
    " Use UTF-8
    set encoding=utf-8

    " Automatically start comments, gq formats comments
    set formatoptions=q

    " Don't wrap lines
    set nowrap
" }

" Folding {
    " Turn folding on by default
    set foldenable

    " Folding should be done by syntax generally
    set foldmethod=syntax

    " By default, let's fold everything but the top level
    set foldlevel=3

    " By default, everything can open a fold except vertical movement
    set foldopen=block,hor,insert,jump,mark,percent,search,tag,undo,quickfix
" }

" Filetype settings {
    autocmd BufRead,BufNewFile *.dhall      set ft=dhall
    autocmd BufRead,BufNewFile *mutt-*      set ft=mail
    autocmd BufRead,BufNewFile *.nix        set ft=nix
    autocmd BufRead,BufNewFile *.sieve      set ft=sieve
    autocmd BufRead,BufNewFile *.sls,*.raml set ft=yaml

    autocmd BufWritePost * %s/\s\+$//e

    autocmd Filetype cabal    set shiftwidth=2 tabstop=2 expandtab softtabstop=2 shiftround
    autocmd Filetype c,cpp    set shiftwidth=4 tabstop=4 foldlevel=0
    autocmd Filetype cucumber set shiftwidth=2 tabstop=2 expandtab
    autocmd Filetype erlang   set shiftwidth=2 tabstop=2 expandtab softtabstop=2 shiftround
    autocmd Filetype haskell  set shiftwidth=2 tabstop=2 expandtab softtabstop=2 shiftround
    autocmd Filetype html,xml set shiftwidth=2 tabstop=2 expandtab
    autocmd Filetype json     set shiftwidth=4 tabstop=4 expandtab
    autocmd Filetype nix      set shiftwidth=2 tabstop=2 expandtab
    autocmd Filetype php      set shiftwidth=4 tabstop=4 expandtab
    autocmd Filetype python   set shiftwidth=4 tabstop=4 expandtab
    autocmd Filetype rst      set shiftwidth=4 tabstop=4 expandtab
    autocmd Filetype ruby     set shiftwidth=2 tabstop=2 expandtab
    autocmd Filetype sieve    set shiftwidth=2 tabstop=2 expandtab
    autocmd Filetype thrift   set shiftwidth=2 tabstop=2 expandtab
    autocmd Filetype yaml     set shiftwidth=2 tabstop=2 expandtab
    autocmd Filetype zsh      set shiftwidth=2 tabstop=2
" }

" Overrides {
    " These get put at the end of vimrc to guarantee it always takes effect
    " Make sure syntax highlighting is always enabled
    syntax on

    "  Set the column count warning to something easier on the eyes
    hi ColorColumn ctermbg=DarkBlue
" }

" COC {
    " Use tab for trigger completion with characters ahead and navigate.
    " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
    " other plugin before putting this into your config.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> to trigger completion.
    if has('nvim')
      inoremap <silent><expr> <c-space> coc#refresh()
    else
      inoremap <silent><expr> <c-@> coc#refresh()
    endif

    " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
    " position. Coc only does snippet and additional edit on confirm.
    " <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
    if exists('*complete_info')
      inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
    else
      inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    endif

    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " GoTo code navigation.
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window.
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocActionAsync('doHover')
      endif
    endfunction

    " Highlight the symbol and its references when holding the cursor.
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Symbol renaming.
    nmap <leader>rn <Plug>(coc-rename)

    " Formatting selected code.
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder.
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Applying codeAction to the selected region.
    " Example: `<leader>aap` for current paragraph
    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap keys for applying codeAction to the current buffer.
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Apply AutoFix to problem on the current line.
    nmap <leader>qf  <Plug>(coc-fix-current)

    " Map function and class text objects
    " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
    xmap if <Plug>(coc-funcobj-i)
    omap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap af <Plug>(coc-funcobj-a)
    xmap ic <Plug>(coc-classobj-i)
    omap ic <Plug>(coc-classobj-i)
    xmap ac <Plug>(coc-classobj-a)
    omap ac <Plug>(coc-classobj-a)

    " Use CTRL-S for selections ranges.
    " Requires 'textDocument/selectionRange' support of language server.
    nmap <silent> <C-s> <Plug>(coc-range-select)
    xmap <silent> <C-s> <Plug>(coc-range-select)

    " Add `:Format` command to format current buffer.
    command! -nargs=0 Format :call CocAction('format')

    " Add `:Fold` command to fold current buffer.
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " Add `:OR` command for organize imports of the current buffer.
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

    " Add (Neo)Vim's native statusline support.
    " NOTE: Please see `:h coc-status` for integrations with external plugins that
    " provide custom statusline: lightline.vim, vim-airline.
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

    " Mappings for CoCList
    " Show all diagnostics.
    nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
    " Manage extensions.
    nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
    " Show commands.
    nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
    " Find symbol of current document.
    nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
    " Search workspace symbols.
    nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
    " Do default action for next item.
    nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
    " Resume latest coc list.
    nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
" }
